buildscript {
    ext {
        // Dependency versions
        // Must be defined here instead of "gradle.properties" because of
        // https://github.com/dependabot/dependabot-core/issues/1618
        detektVersion = '1.16.0'
        gitVersioningVersion = '2.1.1'
        kotlinVersion = '1.4.31'
        retrofitVersion = '2.9.0'
        sonarqubeVersion = '3.1.1'
        springBootVersion = '2.2.4.RELEASE'
        springDependencyManagementVersion = '1.0.9.RELEASE'
        vaadinPluginVersion = '0.14.3.7'
        vaadinVersion = '14.3.7'
    }
}

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "com.vaadin" version "$vaadinPluginVersion"
    id "org.springframework.boot" version "$springBootVersion"
    id "io.spring.dependency-management" version "$springDependencyManagementVersion"
    id "me.qoomon.git-versioning" version "$gitVersioningVersion"
    id "io.gitlab.arturbosch.detekt" version "$detektVersion"
    id "org.sonarqube" version "$sonarqubeVersion"
}

description "Stefans Smart Home WebApp"
group "de.stefan_oltmann.smarthome.webapp"
version "0.0.0"

gitVersioning.apply {
    branch {
        pattern = 'master'
        versionFormat = '${commit.short}'
    }
    tag {
        pattern = 'v(?<tagVersion>[0-9].*)'
        versionFormat = '${tagVersion}'
    }
}

detekt {
    allRules = true
    config = files("$projectDir/detekt.yml")

    // Don't break the build. Just report.
    ignoreFailures = true
}

sonarqube {
    properties {
        property "sonar.projectKey", "smart-home-webapp"
        property "sonar.projectName", "Stefans Smart WebApp"
        property "sonar.organization", "stefanoltmann"
        property "sonar.host.url", "https://sonarcloud.io"
        // Include Detekt issues
        property "sonar.kotlin.detekt.reportPaths", "build/reports/detekt/detekt.xml"
    }
}

// SonarQube should always contain Detekt issues
tasks.findByPath(':sonarqube').dependsOn('detekt')

defaultTasks("clean", "build")

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
    }
}

vaadin {
    pnpmEnable = true
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    jcenter() // for Detekt
    mavenLocal()
    mavenCentral()
}

dependencies {

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // Spring Boot
    implementation 'com.vaadin:vaadin-spring-boot-starter'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'

    // Spring Security
    implementation 'org.springframework.security:spring-security-web'
    implementation 'org.springframework.security:spring-security-config'

    // REST API Calls
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // Unit Tests
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}
